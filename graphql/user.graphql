extend type Query {
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

type Mutation {
  createUser(input: CreateUserInput @spread): User @create
  updateUser(id: ID!, input: UpdateUserInput @spread): User @update
  deleteUser(id: ID!): User @delete
}

input CreateUserInput{
    name: String!
    email: String! @rules(apply:["email", "unique:users,email"])
    password: String! @hash @rules(apply:["min:5"])
}
input UpdateUserInput{
    name: String!
    password: String! @hash @rules(apply:["min:5"])
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    boards: [Board!]! @hasMany
    cards: [Card!]! @hasMany
}
